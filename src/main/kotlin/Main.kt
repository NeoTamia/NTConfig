package re.neotamia.config.main;

import re.neotamia.config.NTConfig
import re.neotamia.nightconfig.core.file.CommentedFileConfig
import re.neotamia.nightconfig.core.serde.DeserializerContext
import re.neotamia.nightconfig.core.serde.SerializerContext
import re.neotamia.nightconfig.core.serde.TypeConstraint
import re.neotamia.config.adapter.TypeAdapter
import re.neotamia.config.annotation.ConfigHeader
import re.neotamia.config.annotation.ConfigVersion
import re.neotamia.nightconfig.core.file.FormatDetector
import re.neotamia.nightconfig.core.serde.NamingStrategy
import re.neotamia.nightconfig.core.serde.ObjectDeserializer
import re.neotamia.nightconfig.core.serde.ValueDeserializer
import re.neotamia.nightconfig.core.serde.ValueSerializer
import re.neotamia.nightconfig.core.serde.annotations.SerdeComment
import re.neotamia.nightconfig.core.serde.annotations.SerdeConfig
import re.neotamia.nightconfig.core.serde.annotations.SerdeKey
import re.neotamia.nightconfig.core.serde.annotations.SerdeSkip
import re.neotamia.nightconfig.json.JsonFormat
import re.neotamia.nightconfig.toml.TomlFormat
import re.neotamia.nightconfig.yaml.YamlFormat
import java.nio.file.Path
import java.util.Optional
import kotlin.jvm.java

enum class Test {
    UWU,
    OWO
}

class ResourceLocation(var namespace: String, var path: String) {
    constructor(path: String) : this(path.substringBefore(":"), path.substringAfter(":"))

    override fun toString(): String {
        return "ResourceLocation(namespace='$namespace', path='$path')"
    }
}

@ConfigHeader("This is a sample configuration file.\nGenerated by Kotlin Serialization.")
class Config(
    @SerdeComment("The name of the configuration")
    val name: String = "Config",
    @ConfigVersion
    val version: Int = 2,
    @SerdeConfig(comments = [SerdeComment("Whether the configuration is enabled")], key = "isEnabled")
    val enabled: Boolean = true,
    @SerdeSkip(SerdeSkip.SkipIf.ALWAYS)
    val decimals: Float = 0.5f,
    val double: Double = 0.123456789,
    val items: List<String> = listOf("item1", "item2", "item3"),
    val settings: Map<String, String> = mapOf("key1" to "value1", "key2" to "value2"),
    val nested: NestedConfig = NestedConfig(),
    val multiline: String = """
        This is a multiline
        string example.
        It preserves line breaks.
    """.trimIndent(),
    val test: Test = Test.OWO,
    val resource: ResourceLocation = ResourceLocation("example:resource_path"),
    val uneVariableOuLeNomPeutEtreTresLong: Boolean = true,
    val toto: Int = 42,
    val titi: Int = 24
) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Config

        if (version != other.version) return false
        if (enabled != other.enabled) return false
        if (decimals != other.decimals) return false
        if (double != other.double) return false
        if (name != other.name) return false
        if (items != other.items) return false
        if (settings != other.settings) return false
        if (nested != other.nested) return false
        if (multiline != other.multiline) return false

        return true
    }

    override fun hashCode(): Int {
        var result = version
        result = 31 * result + enabled.hashCode()
        result = 31 * result + decimals.hashCode()
        result = 31 * result + double.hashCode()
        result = 31 * result + name.hashCode()
        result = 31 * result + items.hashCode()
        result = 31 * result + settings.hashCode()
        result = 31 * result + nested.hashCode()
        result = 31 * result + multiline.hashCode()
        return result
    }

    override fun toString(): String {
        return "Config(name='$name', version=$version, enabled=$enabled, decimals=$decimals, double=$double, items=$items, settings=$settings, nested=$nested, multiline='$multiline', test=$test, resource=$resource, uneVariableOuLeNomPeutEtreTresLong=$uneVariableOuLeNomPeutEtreTresLong, toto=$toto, titi=$titi)"
    }
}

class NestedConfig {
    val description: String = "Nested Config"
    val count: Int = 10
    val nested = InnerNestedConfig()

    override fun toString(): String {
        return "NestedConfig(description='$description', count=$count, nested=$nested)"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as NestedConfig

        if (count != other.count) return false
        if (description != other.description) return false
        if (nested != other.nested) return false

        return true
    }

    override fun hashCode(): Int {
        var result = count
        result = 31 * result + description.hashCode()
        result = 31 * result + nested.hashCode()
        return result
    }
}

class InnerNestedConfig {
    val flag: Boolean = false
    val ratio: Double = 3.14

    override fun toString(): String {
        return "InnerNestedConfig(flag=$flag, ratio=$ratio)"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as InnerNestedConfig

        if (flag != other.flag) return false
        if (ratio != other.ratio) return false

        return true
    }

    override fun hashCode(): Int {
        var result = flag.hashCode()
        result = 31 * result + ratio.hashCode()
        return result
    }
}

class ResourceLocationTypeAdapter : TypeAdapter<ResourceLocation, String> {
    override fun valueClass(): Class<ResourceLocation> { return ResourceLocation::class.java }
    override fun resultClass(): Class<String> { return String::class.java }

    override fun serialize(value: ResourceLocation, ctx: SerializerContext): String {
        return "${value.namespace}:${value.path}"
    }

    override fun deserialize(value: String, resultType: Optional<TypeConstraint>, ctx: DeserializerContext): ResourceLocation {
        return ResourceLocation(value)
    }
}

fun main() {
    val ntconfig = NTConfig();
    ntconfig.registerFormat(TomlFormat.instance(), "toml")
    ntconfig.registerFormat(YamlFormat.defaultInstance(), "yaml", "yml")
    ntconfig.registerFormat(JsonFormat.fancyInstance(), "json")
    ntconfig.registerTypeAdapter( ResourceLocationTypeAdapter())
    ntconfig.setNamingStrategy(NamingStrategy.KEBAB_CASE)

    val config = Config()
    config.resource.namespace = "5555555555555555"
    ntconfig.load(Path.of("config.yml"), config);
    println(config)

//    val config = CommentedFileConfig.builder(Path.of("config.yml")).sync().build()
//    val objectSerializer = ObjectSerializer.builder().withSerializerForClass(ResourceLocation::class.java, ResourceLocationTypeAdapter()).build()
//    objectSerializer.serializeFields(Config(), config)
//    println(config)
//
//    config.save()
//    config.load()

//    val deserializer = ObjectDeserializer.builder().build(); //.withDeserializerForClass(String::class.java, ResourceLocation::class.java, ResourceLocationTypeAdapter()).build()
//    val deserializedConfig = Config()
//    deserializedConfig.resource.namespace = "9999999999999999"
//    deserializer.deserializeFields(config, deserializedConfig)
//    println(deserializedConfig.resource)

//    println(config.getOptionalString("decimals").get())
}
